"""
Автор: Гашев Владимир, группа ИУ7-12Б
Назначение: Программа, которая по введённым координатам вершин находит стороны,
            Длину биссектрису из наименьшего угла,
            Проверяет является ли треугольник прямоугольным
"""
from math import sqrt

# Константа для сравнения вещественных чисел
epsilon = 1e-10

# Ввод данных
print("Введите координаты вершин треугольника (только целочисленные координаты) A, B и C.")
# Координаты вершины A (x1, y1)
s1 = input("Введите координаты точки A (x y): ").split()
# Координаты вершины B (x2, y2)
s2 = input("Введите координаты точки B (x y): ").split()

# Координаты вершины C (x3, y3)
s3 = input("Введите координаты точки C (x y): ").split()

if len(s1)==2 and len(s2)==2 and len(s3)==2:
        x1, y1 = s1[0], s1[1]
        x2, y2 = s2[0], s2[1]
        x3, y3 = s3[0], s3[1]

        # Преобразование переменных в целочисленные значения
        x1,x2,x3,y1,y2,y3 = int(x1),int(x2),int(x3),int(y1),int(y2),int(y3)
        # Проверка на вырожденность треугольника
        k = float('inf')
        t = True
        if (x1-x2)!=0:
            k = (y1-y2)/(x1-x2)
            b = y1 - k*x1
            if y3 == k*x3 + b:
                t = False
        elif x1==x2==x3:
                t = False

        if not t or (x1==x2 and y1==y2) or (x2==x3 and y2==y3) or (x1==x3 and y1==y3):
            print("\nОшибка: Введенные точки НЕ образуют треугольник.")
        else:
            # Вычисление длин сторон треугольника
            # сторона BC, противолежащая вершине A
            a = sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)
            # сторона AC, противолежащая вершине B
            b = sqrt((x3 - x1) ** 2 + (y3 - y1) ** 2)
            # сторона AB, противолежащая вершине C
            c = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

            print()
            # Вывод сторон треугольника
            print(f"Длина стороны AB: {c:.7g}")
            print(f"Длина стороны BC: {a:.7g}")
            print(f"Длина стороны AC: {b:.7g}")

            # Является ли треугольник прямоугольным
            # Теорема Пифагора

            side_a_q = a ** 2
            side_b_q = b ** 2
            side_c_q = c ** 2

            is_right_triangle = False
            if abs(side_a_q + side_b_q - side_c_q) < epsilon:
                is_right_triangle = True
            elif abs(side_a_q + side_c_q - side_b_q) < epsilon:
                is_right_triangle = True
            elif abs(side_b_q + side_c_q - side_a_q) < epsilon:
                is_right_triangle = True

            if is_right_triangle:
                print("Треугольник прямоугольный!")
            else:
                print("Треугольник НЕ прямоугольный!")

            # Вычисление длины биссектрисы из наименьшего угла
            # Наименьший угол лежит напротив наименьшей стороны.
            # l = sqrt(b*c * (1 - (a / (b+c))^2)), где a - сторона напротив угла.

            if a <= b and a <= c:
                # Угол A - наименьший. Биссектриса из A.
                # Стороны, образующие угол: b и c (AC и AB).
                bisector = sqrt(b * c *
                                (1 - (a / (b + c)) ** 2))
                print(f"Длина биссектрисы из наименьшего угла (A): {bisector:.7g}")
            elif b <= a and b <= c:
                # Угол B - наименьший. Биссектриса из B.
                # Стороны, образующие угол: a и c (BC и AB).
                bisector = sqrt(a * c *
                                (1 - (b / (a + c)) ** 2))
                print(f"Длина биссектрисы из наименьшего угла (B): {bisector:.7g}")
            else:
                # Угол C - наименьший. Биссектриса из C.
                # Стороны, образующие угол: a и b (BC и AC).
                bisector = sqrt(a * b *
                                (1 - (c / (a + b)) ** 2))
                print(f"Длина биссектрисы из наименьшего угла (C): {bisector:.7g}")

            print("\n--- Анализ положения контрольной точки ---")
            # Координаты контрольной точки P (x_p, y_p)
            s = input("Введите координаты точки P (x y): ").split()
            if len(s)==2:
                x_p, y_p = map(float, s)

                # Метод для определения принадлежности точки треугольнику.
                # Точка P находится внутри, если она лежит по одну сторону от всех
                # трех прямых, образующих стороны треугольника.
                # Это проверяется через знаки векторных произведений.
                # pos1 - положение P относительно вектора AB
                pos1 = (x2 - x1) * (y_p - y1) - (y2 - y1) * (x_p - x1)
                # pos2 - положение P относительно вектора BC
                pos2 = (x3 - x2) * (y_p - y2) - (y3 - y2) * (x_p - x2)
                # pos3 - положение P относительно вектора CA
                pos3 = (x1 - x3) * (y_p - y3) - (y1 - y3) * (x_p - x3)

                # Если все знаки одинаковые (все >= 0 или все <= 0), точка внутри
                # или на границе треугольника.

                if (pos1 >= 0 and pos2 >= 0 and pos3 >= 0) or (pos1 <= 0 and pos2 <= 0 and pos3 <= 0):
                    print("Результат: Точка находится внутри треугольника.")

                    # Расчет расстояния от точки до ближайшей стороны
                    # Формула расстояния от точки (x_p, y_p) до прямой Ax + By + C = 0:
                    # d = |A*x_p + B*y_p + C| / sqrt(A^2 + B^2)
                    # Для прямой, проходящей через (x_a, y_a) и (x_b, y_b):
                    # A = y_a - y_b, B = x_b - x_a, C = x_a*y_b - x_b*y_a

                    # Расстояние до стороны AB
                    dist_ab = abs((y1 - y2) * x_p + (x2 - x1) * y_p + (x1*y2 - x2*y1)) / c

                    # Расстояние до стороны BC
                    dist_bc = abs((y2 - y3) * x_p + (x3 - x2) * y_p + (x2*y3 - x3*y2)) / a

                    # Расстояние до стороны AC
                    dist_ac = abs((y3 - y1) * x_p + (x1 - x3) * y_p + (x3*y1 - x1*y3)) / b

                    # Поиск минимального из трех расстояний
                    min_distance = min(dist_ac,dist_ab,dist_bc)

                    print(f"Расстояние до ближайшей стороны: {min_distance:.7g}")
                else:
                    print("Результат: Точка находится вне треугольника.")
            else:
                print("Ошибка неверное количество аргументов")
else:
    print(f"Ошибка неверное количество аргументов")