"""
–ü—Ä–æ—Å—Ç—ãe —Ç–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã 9.
–≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è unittest.
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import lab_9_1
import lab_9_2
import lab_9_3
import lab_9_4
import lab_9_5
import lab_9_6
import lab_9_7


def test_lab_9_1():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 1 - –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã M –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤ A –∏ B"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 1...")
    
    # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
    assert lab_9_1.is_perfect_square(0) == True
    assert lab_9_1.is_perfect_square(1) == True
    assert lab_9_1.is_perfect_square(4) == True
    assert lab_9_1.is_perfect_square(9) == True
    assert lab_9_1.is_perfect_square(16) == True
    assert lab_9_1.is_perfect_square(-1) == False
    assert lab_9_1.is_perfect_square(2) == False
    assert lab_9_1.is_perfect_square(3) == False
    
    # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ –ø–æ–ª–Ω—ã—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
    matrix = [[1, 4, 3, 9], [2, 5, 16, 7]]
    assert lab_9_1.count_perfect_squares_in_row(matrix, 0) == 3  # 1, 4, 9
    assert lab_9_1.count_perfect_squares_in_row(matrix, 1) == 1  # 16
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_2():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 2 - –ü–æ–≤–æ—Ä–æ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 2...")
    
    # –¢–µ—Å—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    expected = [[7, 4, 1], [8, 5, 2], [9, 6, 3]]
    lab_9_2.rotate_clockwise(matrix)
    assert matrix == expected
    
    # –¢–µ—Å—Ç –ø–æ–≤–æ—Ä–æ—Ç–∞ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏
    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    expected = [[3, 6, 9], [2, 5, 8], [1, 4, 7]]
    lab_9_2.rotate_counterclockwise(matrix)
    assert matrix == expected
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 2: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_3():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 3 - –ü–æ–¥—Å—á–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã A –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã B"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 3...")
    
    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤
    matrix = [[1, 2], [3, 4], [5, 6]]
    expected = [3.0, 4.0]  # (1+3+5)/3, (2+4+6)/3
    result = lab_9_3.calculate_column_averages(matrix)
    assert result == expected
    
    # –¢–µ—Å—Ç –ø–æ–¥—Å—á–µ—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –±–æ–ª—å—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ
    matrix_a = [[1, 2], [3, 4], [5, 6]]
    averages = [3.0, 4.0]
    expected = [2, 2]  # –í –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ 3,5 > 3.0, –≤–æ –≤—Ç–æ—Ä–æ–º 4,6 > 4.0
    result = lab_9_3.count_greater_than_average(matrix_a, averages)
    assert result == expected
    
    # –¢–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è
    matrix = [[1, 2], [3, 4]]
    counts = [2, 0]
    expected = [[2, 2], [6, 4]]  # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —É–º–Ω–æ–∂–∞–µ—Ç—Å—è –Ω–∞ 2, –≤—Ç–æ—Ä–æ–π –æ—Å—Ç–∞–µ—Ç—Å—è
    lab_9_3.multiply_columns_by_counts(matrix, counts)
    assert matrix == expected
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 3: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_4():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 4 - –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 4...")
    
    # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
    matrix = [[1, 5, 3], [2, 8, 1], [9, 2, 4]]
    row_indices = [0, 1, 2]
    expected = [5, 8, 9]
    result = lab_9_4.find_max_in_rows(matrix, row_indices)
    assert result == expected
    
    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ
    array = [1, 2, 3, 4, 5]
    expected = 3.0
    result = lab_9_4.calculate_average(array)
    assert result == expected
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
    result_empty = lab_9_4.calculate_average([])
    assert result_empty == 0
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 4: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_5():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 5 - –£–º–Ω–æ–∂–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 5...")
    
    # –¢–µ—Å—Ç —É–º–Ω–æ–∂–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü
    matrix_a = [[1, 2], [3, 4]]
    matrix_b = [[5, 6], [7, 8]]
    expected = [[19, 22], [43, 50]]  # 1*5+2*7=19, 1*6+2*8=22, 3*5+4*7=43, 3*6+4*8=50
    result = lab_9_5.multiply_matrices(matrix_a, matrix_b)
    assert result == expected
    
    # –¢–µ—Å—Ç —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
    matrix_a2 = [[1, 2, 3]]
    matrix_b2 = [[4], [5], [6]]
    expected2 = [[32]]  # 1*4+2*5+3*6=32
    result2 = lab_9_5.multiply_matrices(matrix_a2, matrix_b2)
    assert result2 == expected2
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 5: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_6():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 6 - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã —Å–∏–º–≤–æ–ª–æ–≤"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 6...")
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
    assert lab_9_6.is_vowel('a') == True
    assert lab_9_6.is_vowel('E') == True
    assert lab_9_6.is_vowel('i') == True
    assert lab_9_6.is_vowel('O') == True
    assert lab_9_6.is_vowel('u') == True
    assert lab_9_6.is_vowel('b') == False
    assert lab_9_6.is_vowel('Z') == False
    assert lab_9_6.is_vowel('1') == False
    assert lab_9_6.is_vowel('@') == False
    
    # –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤
    assert lab_9_6.is_consonant('b') == True
    assert lab_9_6.is_consonant('C') == True
    assert lab_9_6.is_consonant('z') == True
    assert lab_9_6.is_consonant('M') == True
    assert lab_9_6.is_consonant('a') == False
    assert lab_9_6.is_consonant('E') == False
    assert lab_9_6.is_consonant('1') == False
    assert lab_9_6.is_consonant('@') == False
    
    # –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã —Å–∏–º–≤–æ–ª–æ–≤
    matrix = [['a', 'B', 'c'], ['D', 'e', 'F']]
    expected = [['a', 'B', 'C'], ['D', 'e', 'F']]
    result = lab_9_6.transform_char_matrix(matrix)
    assert result == expected
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 6: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def test_lab_9_7():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã 7 - –†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º"""
    print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã 7...")
    
    # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    # X –Ω–∞–∏–±–æ–ª—å—à–µ–µ
    dim, size = lab_9_7.find_max_dimension(5, 3, 2)
    assert dim == 0
    assert size == 5
    
    # Y –Ω–∞–∏–±–æ–ª—å—à–µ–µ
    dim, size = lab_9_7.find_max_dimension(2, 7, 3)
    assert dim == 1
    assert size == 7
    
    # Z –Ω–∞–∏–±–æ–ª—å—à–µ–µ
    dim, size = lab_9_7.find_max_dimension(2, 3, 8)
    assert dim == 2
    assert size == 8
    
    # –†–∞–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    dim, size = lab_9_7.find_max_dimension(3, 3, 3)
    assert dim == 0  # X –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º
    
    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ä–µ–∑–∞
    assert lab_9_7.get_slice_index(5) == 2  # 5//2 = 2
    assert lab_9_7.get_slice_index(4) == 2  # 4//2 = 2
    assert lab_9_7.get_slice_index(1) == 0  # 1//2 = 0
    
    # –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ä–µ–∑–∞
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π 3D –º–∞—Å—Å–∏–≤ 2x2x2
    array_3d = [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
    
    # –°—Ä–µ–∑ –ø–æ X (–∏–Ω–¥–µ–∫—Å 0)
    slice_x = lab_9_7.extract_slice(array_3d, 0, 0)
    expected_x = [[1, 2], [3, 4]]
    assert slice_x == expected_x
    
    # –°—Ä–µ–∑ –ø–æ Y (–∏–Ω–¥–µ–∫—Å 0)
    slice_y = lab_9_7.extract_slice(array_3d, 1, 0)
    expected_y = [[1, 2], [5, 6]]
    assert slice_y == expected_y
    
    # –°—Ä–µ–∑ –ø–æ Z (–∏–Ω–¥–µ–∫—Å 0)
    slice_z = lab_9_7.extract_slice(array_3d, 2, 0)
    expected_z = [[1, 3], [5, 7]]
    assert slice_z == expected_z
    
    print("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ 7: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("=" * 60)
    print("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –î–õ–Ø –õ–ê–ë–û–†–ê–¢–û–†–ù–û–ô –†–ê–ë–û–¢–´ 9")
    print("=" * 60)
    
    try:
        test_lab_9_1()
        test_lab_9_2()
        test_lab_9_3()
        test_lab_9_4()
        test_lab_9_5()
        test_lab_9_6()
        test_lab_9_7()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("=" * 60)
        return True
        
    except AssertionError as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        return False


if __name__ == '__main__':
    success = run_all_tests()
    
    if success:
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω—ã—Ö unit-—Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python test_lab9.py")
    else:
        print("\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.")
